services:
  postgres:
    image: postgres:17
    container_name: postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - app-network
    env_file:
      .env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 0.5s
      retries: 10

  django:
    restart: always
    build: ./django
    container_name: django
    expose:
      - "8000"
    volumes:
      - ./django/app:/app/
    networks:
      - app-network
    env_file:
      .env
    environment:
      - NGROK_URL=${NGROK_URL}
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    restart: always
    build: ./nginx
    container_name: nginx
    volumes:
      - ./django/app/transcendence/static:/static
    networks:
      - app-network
    env_file:
      .env
    ports:
      - 8000:443
    depends_on:
      - django
      - prometheus

  redis:
    image: redis:7.4.1
    container_name: redis
    volumes:
      - ./data/redis:/data
    networks:
      - app-network
    restart: always

  celery:
    build:
      context: ./django
    container_name: celery
    working_dir: /app
    command: celery -A transcendence worker --loglevel=info
    volumes:
      - ./django/app:/app
    depends_on:
      - redis
      - django
    networks:
      - app-network
    env_file:
      .env
    restart: always

  node-exporter:
    build:
      context: ./monitoring/node-exporter
      dockerfile: Dockerfile
    container_name: node-exporter
    networks:
      - app-network
    pull_policy: never
    restart: unless-stopped

  prometheus:
    build:
      context: ./monitoring/prometheus
      dockerfile: Dockerfile
    container_name: prometheus
    expose:
      - "9090" # Sadece Nginx eri≈üebilsin
    volumes:
      - ./monitoring/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    restart: always

  grafana:
    build:
      context: ./monitoring/grafana
      dockerfile: Dockerfile
    container_name: grafana
    expose:
      - "3000"
    networks:
      - app-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://localhost:8000/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_HTTP_ADDR=0.0.0.0
    restart: always
    depends_on:
      - prometheus

  alertmanager:
    build:
      context: ./monitoring/alertmanager
      dockerfile: Dockerfile
    # image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager/conf/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    expose:
      - "9093"
    networks:
      - app-network
    # environment:
    #   EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
    #   EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"

volumes:
  grafana_data: {}

networks:
  app-network:
    driver: bridge
